#lang racket
(define COST-BASE 180)
(define COST-FACTOR 0.04)
(define ATTENDANCE-BASE 120)
(define ATTENDANCE-FACTOR (/ 15 .10))
(define ATTENDANCE-CAP 5.00)

;; profit : number[price] -> number[profit]
;; to compute how much money the movie makes if it charges price/ticket
;; Examples:
;; if the price is 5.0, the movie makes 415.20
;; if the price is 4.9, the movie makes 476.10
(define (profit ticket-price)
  (- (revenue ticket-price)
     (cost ticket-price)))

;; revenue : number[price] -> number[revenue]
;; to compute how much revenue are generated by attendees at some given price
;; Examples:
;; at 5.00, we get 120 attendees, and produce a revenue of 5.0 * 120 = 600.0
;; at 4.90, we get 135 attendees, and produce a revenue of 4.9 * 135 = 661.5
(define (revenue ticket-price)
  (* (attendees ticket-price) ticket-price))

;; cost : number[price] -> number[cost]
;; to compute how much it costs to accommodate attendees
;; Examples:
;; if the price is 5.00, the cost is $184.80
;; if the price is 4.90, the cost is $185.40
(define (cost ticket-price)
  (+ COST-BASE
     (* COST-FACTOR (attendees ticket-price))))

;; attendees : number[price] -> number[people]
;; to compute how many attendees we get at some price
;; Examples:
;; at 5.0, we get 120
;; at 4.9, we get 135
(define (attendees ticket-price)
  (+ ATTENDANCE-BASE
     (* ATTENDANCE-FACTOR (- ATTENDANCE-CAP ticket-price))))

;; TESTS
(attendees 5.00) "should be" 120
(attendees 4.90) "should be" 135

(cost 5.00) "should be" 184.80
(cost 4.90) "should be" 185.40

(revenue 5.00) "should be" 600
(revenue 4.90) "should be" 661.50

(profit 5.00) "should be" 415.20
(profit 4.90) "should be" 476.10
